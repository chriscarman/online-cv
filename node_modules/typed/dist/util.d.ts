import type { Err, Obj, Ok, Result, Struct } from "./types";
/**
 * Check if value is a string.
 */
export declare function isString(value: unknown): value is string;
/**
 * Check if value is a valid number.
 */
export declare function isNumber(value: unknown): value is number;
/**
 * Check if value is a boolean.
 */
export declare function isBoolean(value: unknown): value is boolean;
/**
 * Check if value is undefined.
 */
export declare function isUndefined(value: unknown): value is undefined;
/**
 * Check if value is a valid Date.
 */
export declare function isDate(value: unknown): value is Date;
/**
 * Check if value is an array.
 */
export declare function isArray(value: unknown): value is any[];
/**
 * Check if value is null.
 */
export declare function isNull(value: unknown): value is null;
/**
 * Check if value is an object.
 */
export declare function isObject(value: unknown): value is Obj;
/**
 * Create a new Ok result.
 */
export declare function ok<T>(value: T): Ok<T>;
/**
 * Create a new Err result.
 */
export declare function err<E extends Error>(error: E): Err<E>;
/**
 * Check if result is an Ok.
 */
export declare function isOk<T, E extends Error>(result: Result<T, E>): result is Ok<T>;
/**
 * Check if result is an Err.
 */
export declare function isErr<T, E extends Error>(result: Result<T, E>): result is Err<E>;
/**
 * Map a base struct into another struct.
 */
export declare const map: <T, O>(struct: Struct<T, any>, mapFn: Struct<O, T>) => Struct<O, any>;
/**
 * Takes the output of a struct and feeds it into a series of functions that accept and return the same type.
 */
export declare const chain: <T>(struct: Struct<T, any>, ...fns: ((input: T) => T)[]) => Struct<T, any>;
/**
 * Returns the inner value of an Ok. Throws an error if the result is an Err.
 */
export declare function unwrap<T, E extends Error>(result: Result<T, E>): T;
/**
 * Returns the inner value of an Ok. Returns the default value if the result is an Err.
 */
export declare function unwrapOr<T, E extends Error>(result: Result<T, E>, def: T): T;
